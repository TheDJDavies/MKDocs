{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Iw\u00e2n's Notes","text":"<p>For full documentation visit mkdocs.org.</p> <p>This is a useful place for Iw\u00e2n to store any notes in an elegant markdown</p>"},{"location":"#useful-commands","title":"Useful Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Lesson1/","title":"Lesson 1 - Download Python3","text":"<p>Python3 is on my current system</p> <p>I am using version <code>3.14.0a4</code></p> <p>To activate, open terminal and type <code>python</code> then press Enter </p> <p>Information about current version will appear with purple <code>&gt;&gt;&gt;</code> to indicate typing in python.</p>"},{"location":"Lesson10/","title":"Lesson 10 - How Python Code is Executed","text":"<p>Some bs about bytecodes converting programming language into machine language or whatever</p>"},{"location":"Lesson11/","title":"Lesson 11 - Quiz 1","text":"What is an expression? <p>Expressions are representations of value. They are different from statements in the fact that statements do something while expressions are representation of value. For example any string is also an expressions since it represents the value of the string as well.</p> What is a syntax error? <p>A syntax error is a mistake in the way a programming language's rules are followed when writing code. These errors can occur when there's a misunderstanding of the syntax, like misspelling a keyword or missing a punctuation mark. Essentially, it's like having a grammatical error in a language, preventing the code from being correctly interpreted and executed. </p> What does a linter do? <p>A linter is a static code analysis tool that automatically checks your source code for errors, stylistic issues, and potential bugs. It identifies problems like syntax errors, deviations from coding style guidelines, and suspicious code patterns, helping developers catch issues before runtime.</p>","tags":["Expression","Linting","Syntax Error"]},{"location":"Lesson12/","title":"Lesson 12 - Variables","text":"<p>Variables will store data in its memory</p> <p>Primitive variable types are: numbers, booleans &amp; strings</p> <p>Whole number = INTEGER [because why should programmers not speak bloody english??]</p> <p>Decimal number = FLOAT / FLOATING POINT NUMBER [seriously guys...]</p> <p>Booleans need to be capitalised</p>","tags":["Variable","String","Boolean","Floating Point Number","Integer"]},{"location":"Lesson13/","title":"Lesson 13 - Variable Names","text":"<p>Don't use shorthand for variable names (think like lab books)</p> <p>Variables are all lowercase:</p> <ul> <li>This is in line with PEP 8 which gives guidance as to which formatting is required</li> <li>The formatting is dependant on usage. For functions and variables, this is all lowercase.</li> </ul> <p>Words separated by underscore <code>example_words_seperated</code></p> <p>autopep8 cannot distinguish separate words or determine which formatting is required</p>","tags":["Variable","PEP8"]},{"location":"Lesson2/","title":"Lesson 2 - Python Interpreter","text":"<p>As in Task 1, type <code>python</code> into the terminal to activate</p> <p>An EXPRESSION is a piece of code that produces a VALUE</p> <p><code>2+2</code> then press Enter returns <code>4</code> - a value</p> <p><code>2&gt;1</code> then press Enter returns <code>True</code> - a boolean value</p> <p><code>2&gt;5</code> then press Enter returns <code>False</code> - a boolean value</p> <p><code>2&gt;1</code> then press Enter returns <code>True</code> - a boolean value</p> <p><code>2&gt;</code> then press Enter returns <code>SyntaxError</code>- consider it as coding grammar</p>","tags":["Expression","Value","Boolean","Syntax Error"]},{"location":"Lesson3/","title":"Lesson 3 - Code Editors","text":"<p>Writing python code can be done using either:</p> <ol> <li>Code editor {e.g. VSCode, Atom or Sublime}</li> <li>IDE [Integrated Development Environment] {e.g. PyCharm or Visual Studio Code}</li> </ol> <p>An IDE is a code editor with additional features. e.g. autocompletion, debugging &amp; testing</p> <p>This course will use VSCode aka Visual Studio Code. Later we will use an extenstion/plug-in to convert it to an IDE</p> <p>Visual Studio Code is already on my system. </p>","tags":["Code Editor","IDE"]},{"location":"Lesson4/","title":"Lesson 4 - My First Python Program","text":"<p>Created a new folder: <code>/home/iwan/Documents/Python Notes/HelloWorld</code></p> <p>All python files need to be <code>[FILENAME].py</code></p> <p>Pre-built FUNCTIONS exist in python. An example is <code>print()</code></p> <p>CALLING a function means executing / using it</p> <p>When calling a function, you must follow it with <code>()</code></p> <p>When using a STRING [line of text] it must be entered between \" marks</p> <p>To toggle the terminal in VSCode press Ctrl+`</p> <p>To run the code type <code>python [FILENAME]</code></p> <p>You are able to use a string in an expression. e.g. String*10 will result in the string being repeated 10 times</p>","tags":["Function","String","Calling","Expression"]},{"location":"Lesson5/","title":"Lesson 5 - Python Extension","text":"<p>Convert VSCode to an IDE using an extension called <code>python</code></p> <p>IDE will add addtional functions:</p> <ol> <li>Linting [analysing code for potential errors]</li> <li>Debugging [finding an fixing errors]</li> <li>AutoCompletion [I guess it's just tabbing?? Any need for an IDE?]</li> <li>Code Formatting [propper formatting]</li> <li>Unit Testing [test the code to ensure desired outcomes]</li> <li>Code Snippets [re-usable code blocks]</li> </ol> <p>Python extension is already installed on my VSCode. This is why the above seemed so familiar.</p> <p>We can now run code using the play button on the top right.</p>","tags":["IDE","Extensions","Linting"]},{"location":"Lesson6/","title":"Lesson 6 - Linting Code","text":"<p>1st linting example did not work on mmy VSCode. Other extentions interfered with the linting     Now other extentions are disabled, it works fine</p> <p>Ctrl+Shift+M to open problems panel</p> <p>PyLint only works on 1 error at a time, could be slow.</p>","tags":["Linting"]},{"location":"Lesson7/","title":"Lesson 7 - Formatting Code","text":"<p>Python Enhancement Proposals (PEPs)</p> <p>Python PEPs can be found at PEP8</p> <p>PEP 8 Style Guide for Python Code ensures coding consistency between programmers.</p> <p>Extension <code>autopep8</code> will allow code to be formatted per PEP 8</p> <p>To run, press Ctrl+Shift+P to open the Command Palette, then search for <code>Format Document</code></p> <p>To run automatically: File  Preferences  Settings  search for <code>formatonsave</code>  enable <code>Editor:Format On Save</code></p>","tags":["PEP","PEP8","Extension","Palette"]},{"location":"Lesson8/","title":"Lesson 8 - Running Python Code","text":"<p>In the terminal, type <code>python</code> followed by the name of the file</p> <p>OR push the play button in VSC</p> <p>VSC can be set up to run code on a custom key binding</p> <p>Command Palette  Ctrl+Shift+P  search for open keyboard shortcuts  Brings up a list of all commands with associated key bindings  search for run python file  double click on the <code>Keybinding</code> column and assign the desired keybinding</p>","tags":["Palette"]},{"location":"Lesson9/","title":"Lesson 9 - Python Implementations","text":"<p>Python = language OR Implementation</p> <p>Implementation understands and executes the language</p> <p>Different python implementations are written in different languages, the default being C (known as CPython)</p> <p>Different implementations behave slightly differently / have different features</p> <p>One technical feature of the different implementations is that you can import code of a different language (e.g. Java) into a specific implementation of python (e.g. Jython)</p>","tags":["Implementations"]},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#tag:boolean","title":"Boolean","text":"<ul> <li>            Lesson 12 - Variables          </li> <li>            Lesson 2 - Python Interpreter          </li> </ul>"},{"location":"tags/#tag:calling","title":"Calling","text":"<ul> <li>            Lesson 4 - My First Python Program          </li> </ul>"},{"location":"tags/#tag:code-editor","title":"Code Editor","text":"<ul> <li>            Lesson 3 - Code Editors          </li> </ul>"},{"location":"tags/#tag:expression","title":"Expression","text":"<ul> <li>            Lesson 11 - Quiz 1          </li> <li>            Lesson 2 - Python Interpreter          </li> <li>            Lesson 4 - My First Python Program          </li> </ul>"},{"location":"tags/#tag:extension","title":"Extension","text":"<ul> <li>            Lesson 7 - Formatting Code          </li> </ul>"},{"location":"tags/#tag:extensions","title":"Extensions","text":"<ul> <li>            Lesson 5 - Python Extension          </li> </ul>"},{"location":"tags/#tag:floating-point-number","title":"Floating Point Number","text":"<ul> <li>            Lesson 12 - Variables          </li> </ul>"},{"location":"tags/#tag:function","title":"Function","text":"<ul> <li>            Lesson 4 - My First Python Program          </li> </ul>"},{"location":"tags/#tag:ide","title":"IDE","text":"<ul> <li>            Lesson 3 - Code Editors          </li> <li>            Lesson 5 - Python Extension          </li> </ul>"},{"location":"tags/#tag:implementations","title":"Implementations","text":"<ul> <li>            Lesson 9 - Python Implementations          </li> </ul>"},{"location":"tags/#tag:integer","title":"Integer","text":"<ul> <li>            Lesson 12 - Variables          </li> </ul>"},{"location":"tags/#tag:linting","title":"Linting","text":"<ul> <li>            Lesson 11 - Quiz 1          </li> <li>            Lesson 5 - Python Extension          </li> <li>            Lesson 6 - Linting Code          </li> </ul>"},{"location":"tags/#tag:pep","title":"PEP","text":"<ul> <li>            Lesson 7 - Formatting Code          </li> </ul>"},{"location":"tags/#tag:pep8","title":"PEP8","text":"<ul> <li>            Lesson 13 - Variable Names          </li> <li>            Lesson 7 - Formatting Code          </li> </ul>"},{"location":"tags/#tag:palette","title":"Palette","text":"<ul> <li>            Lesson 7 - Formatting Code          </li> <li>            Lesson 8 - Running Python Code          </li> </ul>"},{"location":"tags/#tag:string","title":"String","text":"<ul> <li>            Lesson 12 - Variables          </li> <li>            Lesson 4 - My First Python Program          </li> </ul>"},{"location":"tags/#tag:syntax-error","title":"Syntax Error","text":"<ul> <li>            Lesson 11 - Quiz 1          </li> <li>            Lesson 2 - Python Interpreter          </li> </ul>"},{"location":"tags/#tag:value","title":"Value","text":"<ul> <li>            Lesson 2 - Python Interpreter          </li> </ul>"},{"location":"tags/#tag:variable","title":"Variable","text":"<ul> <li>            Lesson 12 - Variables          </li> <li>            Lesson 13 - Variable Names          </li> </ul>"}]}